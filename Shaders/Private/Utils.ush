float IsInsideUV(float2 UV)
{
	return step(0.0f,UV.x) * (1.0f - step(1.0f,UV.x))
			* step(0.0f,UV.y) * (1.0f - step(1.0f,UV.y));
}

float2 FlipUV(float2 UV)
{
	return float2(UV.x, 1 - UV.y);
}

float2x2 ScaleMatrix(float2 scale)
{
	float2x2 mat = float2x2(0,0,0,0);
	mat[0][0] = scale.x;
	mat[1][1] = scale.y;
	return mat;	
}

float2x2 RotateMatrix(float rotate)
{
	float2x2 mat = float2x2(0,0,0,0);
	mat[0][0] = cos(rotate);
	mat[0][1] = sin(rotate);
	mat[1][0] = -sin(rotate);
	mat[1][1] = cos(rotate);
	return mat;
}

float TriangleContainPoint(float2 a,float2 b,float2 c,float2 p)
{
	float2 v0 = c - a;
	float2 v1 = b - a;
	float2 v2 = p - a;

	float dot00 = dot(v0, v0);
	float dot01 = dot(v0, v1);
	float dot02 = dot(v0, v2);
	float dot11 = dot(v1, v1);
	float dot12 = dot(v1, v2);

	float invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
	float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	float v = (dot00 * dot12 - dot01 * dot02) * invDenom;

	return (u >= 0.0) && (v >= 0.0) && (u + v <= 1.0) ? 1.0f : 0.0f;
}

float DegreesToRadians(float degrees) {
	return degrees * 0.01745329251;
}
float RadiansToDegrees(float radians) {
	return radians * (180.0 / 3.14159265359);
}

